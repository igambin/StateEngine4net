//  <autogenerated>
//
//      This file was generated by T4 code generator 'StateEngineTemplate.tt'
//
//      Any changes made to this file manually will be lostnext time the file is regenerated.
//
//      As all classes are created as partial classes you can extend these classes by 
//      creating and adapting a matching partial class.
//
//</autogenerated>

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using StateEngine4net.Shared;
using StateEngine4net.Shared.Exceptions;
using StateEngine4net.Shared.Interfaces;
using Newtonsoft.Json;
using StateEngine4net.Tests.TestModel;

namespace StateEngine4net.Tests.StateEngine
{
    public interface IStatedTestObjectState : IState<IStatedTestObjectState, StatedTestObjectStatesEnum>
    {
        IStatedTestObjectState Start();
        IStatedTestObjectState Finalize();
        IStatedTestObjectState Cancel();
        IStatedTestObjectState Fail();
        IStatedTestObjectState Reset();
      
    }

    public abstract class StatedTestObjectState : State<IStatedTestObjectState, StatedTestObjectStatesEnum>, IStatedTestObjectState
    {
        public virtual IStatedTestObjectState Start() => UndefinedTransition(nameof(Start));
        public virtual IStatedTestObjectState Finalize() => UndefinedTransition(nameof(Finalize));
        public virtual IStatedTestObjectState Cancel() => UndefinedTransition(nameof(Cancel));
        public virtual IStatedTestObjectState Fail() => UndefinedTransition(nameof(Fail));
        public virtual IStatedTestObjectState Reset() => UndefinedTransition(nameof(Reset));
        public override IStatedTestObjectState TechnicalError() => new StatedTestObjectStates.TechnicalError();

    }
     
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum StatedTestObjectStatesEnum 
    {
        Initial, InProgress, Done, Cancelled, Failed, TechnicalError
    }

    public class StatedTestObjectStates
    {
        public class Initial : StatedTestObjectState, IState<IStatedTestObjectState, StatedTestObjectStatesEnum>
        {
            public override StatedTestObjectStatesEnum Name => StatedTestObjectStatesEnum.Initial;
            public override IStatedTestObjectState Start() => new StatedTestObjectStates.InProgress();       
        }

        public class InProgress : StatedTestObjectState, IState<IStatedTestObjectState, StatedTestObjectStatesEnum>
        {
            public override StatedTestObjectStatesEnum Name => StatedTestObjectStatesEnum.InProgress;
            public override IStatedTestObjectState Finalize() => new StatedTestObjectStates.Done();       
            public override IStatedTestObjectState Cancel() => new StatedTestObjectStates.Cancelled();       
            public override IStatedTestObjectState Fail() => new StatedTestObjectStates.Failed();       
        }

        public class Done : StatedTestObjectState, IState<IStatedTestObjectState, StatedTestObjectStatesEnum>
        {
            public override StatedTestObjectStatesEnum Name => StatedTestObjectStatesEnum.Done;
            public override IStatedTestObjectState Reset() => new StatedTestObjectStates.Initial();       
        }

        public class Cancelled : StatedTestObjectState, IState<IStatedTestObjectState, StatedTestObjectStatesEnum>
        {
            public override StatedTestObjectStatesEnum Name => StatedTestObjectStatesEnum.Cancelled;
            public override IStatedTestObjectState Reset() => new StatedTestObjectStates.Initial();       
        }

        public class Failed : StatedTestObjectState, IState<IStatedTestObjectState, StatedTestObjectStatesEnum>
        {
            public override StatedTestObjectStatesEnum Name => StatedTestObjectStatesEnum.Failed;
            public override IStatedTestObjectState Reset() => new StatedTestObjectStates.Initial();       
        }

        public class TechnicalError : StatedTestObjectState, IState<IStatedTestObjectState, StatedTestObjectStatesEnum>
        {
            public override StatedTestObjectStatesEnum Name => StatedTestObjectStatesEnum.TechnicalError;
            public override IStatedTestObjectState Reset() => new StatedTestObjectStates.Initial();       
        }

 
    }

    public interface IStatedTestObjectStateEngine : IStateEngine<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum> { }

    /// <summary>
    /// 	RunStateController provides Actions that are to be executed on 
    /// 	state transitions. This allows modifications and interactions in
    /// 	and of the stated object when the state is about to change.
    /// </summary>
    public abstract class StatedTestObjectStateEngineBase : StateEngine<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum>, IStatedTestObjectStateEngine
    {

        public override List<Transition<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum>> Transitions 
            => new List<Transition<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum>>
            {
                new Transition<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum>(new StatedTestObjectStates.Initial(), state => state.Start(), StartRun, null,null),
                new Transition<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum>(new StatedTestObjectStates.InProgress(), state => state.Finalize(), FinalizeRun, state => state.Fail(),null),
                new Transition<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum>(new StatedTestObjectStates.InProgress(), state => state.Cancel(), null, null,null),
                new Transition<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum>(new StatedTestObjectStates.InProgress(), state => state.Fail(), null, null,null),
                new Transition<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum>(new StatedTestObjectStates.Done(), state => state.Reset(), null, null,null),
                new Transition<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum>(new StatedTestObjectStates.Cancelled(), state => state.Reset(), null, null,null),
                new Transition<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum>(new StatedTestObjectStates.Failed(), state => state.Reset(), null, null,null),
                new Transition<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum>(new StatedTestObjectStates.TechnicalError(), state => state.Reset(), StartCleanup, null,null),
            };

        // NOTE: if a constructor receiving specific dependencies is required, 
        //       defining the required constructor with all required dependencies 
        //       to handle the transitions, e. g. repositories, logger, etc.
        //       in the file StatedTestObjectStateEngine.Partial.cs file
        //
        //       implement the following methods as partial methods in that partial 
        //       class as well in order to satisfy the MethodGroup-Calls in the
        //       transition list above
        protected abstract Task<bool> StartRun(StatedTestObject statedtestobject);
        protected abstract Task<bool> FinalizeRun(StatedTestObject statedtestobject);
        protected abstract Task<bool> StartCleanup(StatedTestObject statedtestobject);
    }
} 

