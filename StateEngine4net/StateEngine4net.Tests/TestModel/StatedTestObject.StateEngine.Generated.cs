//  <autogenerated>
//
//      This file was generated by T4 code generator 'StateEngineTamplate.tt'
//
//      Any changes made to this file manually will be lostnext time the file is regenerated.
//
//      As all classes are created as partial classes you can extend these classes by 
//      creating and adapting a matching partial class.
//
//</autogenerated>

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using StateEngine4net.Shared;
using StateEngine4net.Shared.Exceptions;
using StateEngine4net.Shared.Interfaces;
using StateEngine4net.Tests.TestModel;

namespace StateEngine4net.Tests.StateEngines
{
    public interface IStatedTestObjectState : IState<IStatedTestObjectState>
    {
        IStatedTestObjectState Start { get; }
        IStatedTestObjectState Finalize { get; }
        IStatedTestObjectState Cancel { get; }
        IStatedTestObjectState Fail { get; }
        IStatedTestObjectState Reset { get; }
    }

    public abstract class StatedTestObjectState : State<IStatedTestObjectState>, IStatedTestObjectState
    {
        public virtual IStatedTestObjectState Start => UndefinedTransition(nameof(Start));
        public virtual IStatedTestObjectState Finalize => UndefinedTransition(nameof(Finalize));
        public virtual IStatedTestObjectState Cancel => UndefinedTransition(nameof(Cancel));
        public virtual IStatedTestObjectState Fail => UndefinedTransition(nameof(Fail));
        public virtual IStatedTestObjectState Reset => UndefinedTransition(nameof(Reset));
        public override IStatedTestObjectState T_Error(IStatedTestObjectState previousState, Expression<Func<IStatedTestObjectState, IStatedTestObjectState>> attemptedTransition, Exception exception)
            => new StatedTestObjectStates.T_Error() 
                {
                    PreviousState = previousState,
                    AttemptedTransition = attemptedTransition,
                    Exception = exception
                };
    }

    public class StatedTestObjectStates
    {
        public class Initial : StatedTestObjectState, IState<IStatedTestObjectState>
        {
            public override IStatedTestObjectState Start => new StatedTestObjectStates.InProgress();       
        }

        public class InProgress : StatedTestObjectState, IState<IStatedTestObjectState>
        {
            public override IStatedTestObjectState Finalize => new StatedTestObjectStates.Done();       
            public override IStatedTestObjectState Cancel => new StatedTestObjectStates.Cancelled();       
            public override IStatedTestObjectState Fail => new StatedTestObjectStates.Failed();       
        }

        public class Done : StatedTestObjectState, IState<IStatedTestObjectState>
        {
            public override IStatedTestObjectState Reset => new StatedTestObjectStates.Initial();       
        }

        public class Cancelled : StatedTestObjectState, IState<IStatedTestObjectState>
        {
            public override IStatedTestObjectState Reset => new StatedTestObjectStates.Initial();       
        }

        public class Failed : StatedTestObjectState, IState<IStatedTestObjectState>
        {
            public override IStatedTestObjectState Reset => new StatedTestObjectStates.Initial();       
        }

        public class T_Error : StatedTestObjectState, ITechnicalErrorState<IStatedTestObjectState>, IState<IStatedTestObjectState>
        {

            public override IStatedTestObjectState Reset => new StatedTestObjectStates.Initial();       

            public T_Error() {}

            public void InitError(IStatedTestObjectState previousState, Expression<Func<IStatedTestObjectState, IStatedTestObjectState>> attemptedTransition, Exception exception) 
            {
                PreviousState = previousState;
                AttemptedTransition = attemptedTransition;
                Exception = exception;
            }
            public IStatedTestObjectState PreviousState { get; set; }
            public Expression<Func<IStatedTestObjectState, IStatedTestObjectState>> AttemptedTransition { get; set; }
            public Exception Exception { get; set; }
        }

    }

    /// <summary>
    /// 	RunStateController provides Actions that are to be executed on 
    /// 	state transitions. This allows modifications and interactions in
    /// 	and of the stated object when the state is about to change.
    /// </summary>
    public partial class StatedTestObjectStateEngine : StateEngine<StatedTestObject, IStatedTestObjectState>
    {

        public override List<Transition<StatedTestObject, IStatedTestObjectState>> Transitions 
            => new List<Transition<StatedTestObject, IStatedTestObjectState>>
            {
                new Transition<StatedTestObject, IStatedTestObjectState>(new StatedTestObjectStates.Initial(), state => state.Start, StartRun, null,null),
                new Transition<StatedTestObject, IStatedTestObjectState>(new StatedTestObjectStates.InProgress(), state => state.Finalize, FinalizeRun, state => state.Fail,null),
                new Transition<StatedTestObject, IStatedTestObjectState>(new StatedTestObjectStates.InProgress(), state => state.Cancel, null, null,null),
                new Transition<StatedTestObject, IStatedTestObjectState>(new StatedTestObjectStates.InProgress(), state => state.Fail, null, null,null),
                new Transition<StatedTestObject, IStatedTestObjectState>(new StatedTestObjectStates.Done(), state => state.Reset, null, null,null),
                new Transition<StatedTestObject, IStatedTestObjectState>(new StatedTestObjectStates.Cancelled(), state => state.Reset, null, null,null),
                new Transition<StatedTestObject, IStatedTestObjectState>(new StatedTestObjectStates.Failed(), state => state.Reset, null, null,null),
                new Transition<StatedTestObject, IStatedTestObjectState>(new StatedTestObjectStates.T_Error(), state => state.Reset, StartCleanup, null,null),
            };

        // NOTE: if a constructor receiving specific dependencies is required, 
        //       defining the required constructor with all required dependencies 
        //       to handle the transitions, e. g. repositories, logger, etc.
        //       in the file StatedTestObjectStateEngine.Partial.cs file
        //
        //       implement the following methods as partial methods in that partial 
        //       class as well in order to satisfy the MethodGroup-Calls in the
        //       transition list above
        private partial bool StartRun(StatedTestObject statedtestobject);
        private partial bool FinalizeRun(StatedTestObject statedtestobject);
        private partial bool StartCleanup(StatedTestObject statedtestobject);
    }
} 

