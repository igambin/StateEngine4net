//  <autogenerated>
//
//      This file was generated by T4 code generator 'StateEngineTamplate.tt'
//
//      Any changes made to this file manually will be lostnext time the file is regenerated.
//
//      As all classes are created as partial classes you can extend these classes by 
//      creating and adapting a matching partial class.
//
//</autogenerated>

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using StateEngine4net.Core;
using StateEngine4net.Core.Exceptions;
using StateEngine4net.Core.Interfaces;
using StateEngine4net.Core.IoC;
using StateEngine4net.Core.Models;
using StateEngine4net.Events;
using StateEngine4net.Events.Interfaces;
using LightInject;
using Newtonsoft.Json;
using StateEngine4net.Tests.TestModel;
using StateEngine4net.Tests.TestModel.TransitionHandlers;

namespace StateEngine4net.Tests.TestModel
{
    [GeneratedCode("StateEngineTemplate.tt", "1.0.0.0")]
    public interface IStatedTestObjectState : IState<IStatedTestObjectState, StatedTestObjectStatesEnum>
    {
        IStatedTestObjectState Start();
        IStatedTestObjectState Finalize();
        IStatedTestObjectState Cancel();
        IStatedTestObjectState Fail();
        IStatedTestObjectState Reset();
      
    }

    [GeneratedCode("StateEngineTemplate.tt", "1.0.0.0")]
    public abstract class StatedTestObjectState : State<IStatedTestObjectState, StatedTestObjectStatesEnum>, IStatedTestObjectState
    {
        public virtual IStatedTestObjectState Start() => UndefinedTransition(nameof(Start));
        public virtual IStatedTestObjectState Finalize() => UndefinedTransition(nameof(Finalize));
        public virtual IStatedTestObjectState Cancel() => UndefinedTransition(nameof(Cancel));
        public virtual IStatedTestObjectState Fail() => UndefinedTransition(nameof(Fail));
        public virtual IStatedTestObjectState Reset() => UndefinedTransition(nameof(Reset));
    }
     
    [GeneratedCode("StateEngineTemplate.tt", "1.0.0.0")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum StatedTestObjectStatesEnum 
    {
        Initial, InProgress, Done, Cancelled, Failed, TechnicalError
    }

    [GeneratedCode("StateEngineTemplate.tt", "1.0.0.0")]
    public class StatedTestObjectStates
    {
        public class Initial : StatedTestObjectState, IState<IStatedTestObjectState, StatedTestObjectStatesEnum>
        {
            public override StatedTestObjectStatesEnum Name => StatedTestObjectStatesEnum.Initial;
            public override IStatedTestObjectState Start() => new StatedTestObjectStates.InProgress();       
        }

        public class InProgress : StatedTestObjectState, IState<IStatedTestObjectState, StatedTestObjectStatesEnum>
        {
            public override StatedTestObjectStatesEnum Name => StatedTestObjectStatesEnum.InProgress;
            public override IStatedTestObjectState Finalize() => new StatedTestObjectStates.Done();       
            public override IStatedTestObjectState Cancel() => new StatedTestObjectStates.Cancelled();       
            public override IStatedTestObjectState Fail() => new StatedTestObjectStates.Failed();       
        }

        public class Done : StatedTestObjectState, IState<IStatedTestObjectState, StatedTestObjectStatesEnum>
        {
            public override StatedTestObjectStatesEnum Name => StatedTestObjectStatesEnum.Done;
            public override IStatedTestObjectState Reset() => new StatedTestObjectStates.Initial();       
        }

        public class Cancelled : StatedTestObjectState, IState<IStatedTestObjectState, StatedTestObjectStatesEnum>
        {
            public override StatedTestObjectStatesEnum Name => StatedTestObjectStatesEnum.Cancelled;
            public override IStatedTestObjectState Reset() => new StatedTestObjectStates.Initial();       
        }

        public class Failed : StatedTestObjectState, IState<IStatedTestObjectState, StatedTestObjectStatesEnum>
        {
            public override StatedTestObjectStatesEnum Name => StatedTestObjectStatesEnum.Failed;
            public override IStatedTestObjectState Reset() => new StatedTestObjectStates.Initial();       
        }

        public class TechnicalError : StatedTestObjectState, IState<IStatedTestObjectState, StatedTestObjectStatesEnum>
        {
            public override StatedTestObjectStatesEnum Name => StatedTestObjectStatesEnum.TechnicalError;
            public override IStatedTestObjectState Reset() => new StatedTestObjectStates.Initial();       
        }

    }

    [GeneratedCode("StateEngineTemplate.tt", "1.0.0.0")]
    public interface IStatedTestObjectStateEngine : IStateEngine<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum> { }
   
    [GeneratedCode("StateEngineTemplate.tt", "1.0.0.0")]
	public interface IStatedTestObjectStartRunHandler : IStateHandler<StatedTestObject> { }

	[GeneratedCode("StateEngineTemplate.tt", "1.0.0.0")]
	public interface IStatedTestObjectFinalizeRunHandler : IStateHandler<StatedTestObject> { }

	[GeneratedCode("StateEngineTemplate.tt", "1.0.0.0")]
	public interface IStatedTestObjectStartCleanupHandler : IStateHandler<StatedTestObject> { }

    /// <summary>
    /// 	RunStateController provides Actions that are to be executed on 
    /// 	state transitions. This allows modifications and interactions in
    /// 	and of the stated object when the state is about to change.
    /// </summary>
    [GeneratedCode("StateEngineTemplate.tt", "1.0.0.0")]
    public class StatedTestObjectStateEngine : StateEngine<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum>, IStatedTestObjectStateEngine
    {

        public override List<TransitionDefinition<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum>> Transitions 
            => new List<TransitionDefinition<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum>>
            {
                new TransitionDefinition<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum>(new StatedTestObjectStates.Initial(), state => state.Start(), StartRun, null,null),
                new TransitionDefinition<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum>(new StatedTestObjectStates.InProgress(), state => state.Finalize(), FinalizeRun, state => state.Fail(),null),
                new TransitionDefinition<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum>(new StatedTestObjectStates.InProgress(), state => state.Cancel(), null, null,null),
                new TransitionDefinition<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum>(new StatedTestObjectStates.InProgress(), state => state.Fail(), null, null,null),
                new TransitionDefinition<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum>(new StatedTestObjectStates.Done(), state => state.Reset(), null, null,null),
                new TransitionDefinition<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum>(new StatedTestObjectStates.Cancelled(), state => state.Reset(), null, null,null),
                new TransitionDefinition<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum>(new StatedTestObjectStates.Failed(), state => state.Reset(), null, null,null),
                new TransitionDefinition<StatedTestObject, IStatedTestObjectState, StatedTestObjectStatesEnum>(new StatedTestObjectStates.TechnicalError(), state => state.Reset(), StartCleanup, null,null),
            };
    
        private IStatedTestObjectStartRunHandler StatedTestObjectStartRunHandler { get; }
		private IStatedTestObjectFinalizeRunHandler StatedTestObjectFinalizeRunHandler { get; }
		private IStatedTestObjectStartCleanupHandler StatedTestObjectStartCleanupHandler { get; }

        public StatedTestObjectStateEngine(            
			IStatedTestObjectStartRunHandler statedTestObjectStartRunHandler,
			IStatedTestObjectFinalizeRunHandler statedTestObjectFinalizeRunHandler,
			IStatedTestObjectStartCleanupHandler statedTestObjectStartCleanupHandler,
            IStateEventBus<StateChangedEvent<StatedTestObject>> stateEventBus
        ) : base(stateEventBus)
        {
        	StatedTestObjectStartRunHandler = statedTestObjectStartRunHandler;
			StatedTestObjectFinalizeRunHandler = statedTestObjectFinalizeRunHandler;
			StatedTestObjectStartCleanupHandler = statedTestObjectStartCleanupHandler;
        }

        protected IStateHandler<StatedTestObject>  StartRun() => StatedTestObjectStartRunHandler;
        protected IStateHandler<StatedTestObject>  FinalizeRun() => StatedTestObjectFinalizeRunHandler;
        protected IStateHandler<StatedTestObject>  StartCleanup() => StatedTestObjectStartCleanupHandler;
    }

    [GeneratedCode("StateEngineTemplate.tt", "1.0.0.0")]
    public sealed class StatedTestObjectStateEngineDependencyRegistration : IDependencyRegistration
    {
        public void RegisterDependencies(IServiceContainer serviceContainer)
        {
            if (serviceContainer == null) throw new ArgumentNullException(nameof(serviceContainer));
            Compose(serviceContainer);
        }

        public void Compose(IServiceRegistry serviceRegistry)
        {
            serviceRegistry.Register<IStatedTestObjectStateEngine, StatedTestObjectStateEngine>(new PerContainerLifetime());
            serviceRegistry.Register<IStatedTestObjectStartRunHandler, StatedTestObjectStartRunHandler>(new PerContainerLifetime());
			serviceRegistry.Register<IStatedTestObjectFinalizeRunHandler, StatedTestObjectFinalizeRunHandler>(new PerContainerLifetime());
			serviceRegistry.Register<IStatedTestObjectStartCleanupHandler, StatedTestObjectStartCleanupHandler>(new PerContainerLifetime());
            serviceRegistry.RegisterDomainEvent<StateChangedEvent<StatedTestObject>>();

        }
    }
    
} 

